// Generated by CoffeeScript 1.4.0
(function() {
  var Condition, Liquid;

  Liquid = require("../liquid");

  module.exports = Condition = (function() {

    Condition.operators = {
      '==': function(cond, left, right) {
        return cond.equalVariables(left, right);
      },
      '!=': function(cond, left, right) {
        return !cond.equalVariables(left, right);
      },
      '<>': function(cond, left, right) {
        return !cond.equalVariables(left, right);
      },
      '<': function(cond, left, right) {
        return left < right;
      },
      '>': function(cond, left, right) {
        return left > right;
      },
      '<=': function(cond, left, right) {
        return left <= right;
      },
      '>=': function(cond, left, right) {
        return left >= right;
      },
      'contains': function(cond, left, right) {
        if (left && right) {
          return left.indexOf(right) >= 0;
        } else {
          return false;
        }
      }
    };

    Condition.prototype.operators = function() {
      return Liquid.Condition.operators;
    };

    function Condition(left, operator, right) {
      this.left = left;
      this.operator = operator;
      this.right = right;
      this.childRelation = null;
      this.childCondition = null;
    }

    Condition.prototype.evaluate = function(context) {
      var result,
        _this = this;
      context || (context = new Liquid.Context());
      result = this.interpretCondition(this.left, this.right, this.operator, context);
      switch (this.childRelation) {
        case "or":
          return Liquid.async.when(result).when(function(result) {
            return result || _this.childCondition.evaluate(context);
          });
        case "and":
          return Liquid.async.when(result).when(function(result) {
            return result && _this.childCondition.evaluate(context);
          });
        default:
          return result;
      }
    };

    Condition.prototype.or = function(childCondition) {
      this.childCondition = childCondition;
      return this.childRelation = "or";
    };

    Condition.prototype.and = function(childCondition) {
      this.childCondition = childCondition;
      return this.childRelation = "and";
    };

    Condition.prototype.attach = function(attachment) {
      this.attachment = attachment;
      return attachment;
    };

    Condition.prototype["else"] = function() {
      return false;
    };

    Condition.prototype.inspect = function() {
      return "<Condition [" + ([this.left, this.operator, this.right].join(' ')) + "], attachment: " + this.attachment + ">";
    };

    Condition.prototype.equalVariables = function(left, right) {
      return left === right;
    };

    Condition.prototype.interpretCondition = function(left, right, op, context) {
      var operation,
        _this = this;
      if (op == null) {
        return context.get(left);
      }
      operation = Condition.operators[op];
      if (operation == null) {
        throw new Error("Unknown operator " + op);
      }
      left = context.get(left);
      right = context.get(right);
      return Liquid.async.when(left).when(function(left) {
        return Liquid.async.when(right).when(function(right) {
          return operation(_this, left, right);
        });
      });
    };

    return Condition;

  })();

}).call(this);
