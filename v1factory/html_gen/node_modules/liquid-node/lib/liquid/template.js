// Generated by CoffeeScript 1.4.0
(function() {
  var Liquid, _,
    __slice = [].slice;

  Liquid = require("../liquid");

  _ = require("underscore")._;

  module.exports = Liquid.Template = (function() {

    Template.tags = {};

    Template.registerTag = function(name, klass) {
      return this.tags[name.toString()] = klass;
    };

    Template.registerFilter = function(obj) {
      Liquid.Strainer.globalFilter(obj);
      return 123123123123;
    };

    Template.parse = function(source) {
      var template;
      template = new Liquid.Template();
      template.parse(source);
      return template;
    };

    function Template() {
      this.registers = {};
      this.assigns = {};
      this.instanceAssigns = {};
      this.errors = [];
    }

    Template.prototype.parse = function(source) {
      this.root = new Liquid.Document(this.tokenize(source), this);
      return this;
    };

    Template.prototype.render = function() {
      var args, context, last, options;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (this.root == null) {
        return "";
      }
      context = (function() {
        if (args[0] instanceof Liquid.Context) {
          return args.shift();
        } else if (args[0] instanceof Object) {
          return new Liquid.Context([args.shift(), this.assigns], this.instanceAssigns, this.registers, this.rethrowErrors);
        } else if (!(args[0] != null)) {
          return new Liquid.Context(this.assigns, this.instanceAssigns, this.registers, this.rethrowErrors);
        } else {
          throw new Error("Expect Hash or Liquid::Context as parameter");
        }
      }).call(this);
      last = args[args.length - 1];
      if (last instanceof Object && ((last.registers != null) || (last.filters != null))) {
        options = args.pop();
        if (options.registers) {
          _.merge(this.registers, options.registers);
        }
        if (options.filters) {
          context.addFilters(options.filters);
        }
      } else if (last instanceof Object) {
        context.addFilters(args.pop());
      }
      try {
        return Liquid.async.when(this.root.render(context));
      } finally {
        this.errors = context.errors;
      }
    };

    Template.prototype.renderOrRaise = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      this.rethrowErrors = true;
      return this.render.apply(this, args);
    };

    Template.prototype.tokenize = function(source) {
      var tokens;
      if (source.source != null) {
        source = source.source;
      }
      if (source.toString().length === 0) {
        return [];
      }
      tokens = source.split(Liquid.TemplateParser);
      if (tokens[0] && tokens[0].length === 0) {
        tokens.shift();
      }
      return tokens;
    };

    return Template;

  })();

}).call(this);
